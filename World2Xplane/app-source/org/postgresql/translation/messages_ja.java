/*     */ package org.postgresql.translation;
/*     */ 
/*     */ import java.util.Enumeration;
/*     */ import java.util.Hashtable;
/*     */ import java.util.MissingResourceException;
/*     */ import java.util.ResourceBundle;
/*     */ 
/*     */ public class messages_ja extends ResourceBundle {
/*     */   private static final Hashtable table;
/*     */   
/*     */   static {
/*   6 */     Hashtable hashtable = new Hashtable();
/*   7 */     hashtable.put("", "Project-Id-Version: head-ja\nReport-Msgid-Bugs-To: \nPOT-Creation-Date: 2010-05-05 13:49-0700\nPO-Revision-Date: 2010-04-11 22:58+0900\nLast-Translator: Hiroshi Saito <z-saito@guitar.ocn.ne.jp>\nLanguage-Team: PostgreSQL <z-saito@guitar.ocn.ne.jp>\nMIME-Version: 1.0\nContent-Type: text/plain; charset=UTF-8\nContent-Transfer-Encoding: 8bit\nX-Generator: KBabel 1.0.2\nX-Poedit-Language: Japanese\nX-Poedit-Country: Japan\n");
/*   8 */     hashtable.put("Error loading default settings from driverconfig.properties", "driverconfig.propertiesによる初期設定のロードエラー");
/*   9 */     hashtable.put("Your security policy has prevented the connection from being attempted.  You probably need to grant the connect java.net.SocketPermission to the database server host and port that you wish to connect to.", "セキュリティ・ポリシーは、接続を妨げました。おそらく、データベース・サーバー・ホスト接続のためjava.net.SocketPermissionを許可する必要があります。");
/*  10 */     hashtable.put("Something unusual has occured to cause the driver to fail. Please report this exception.", "なにかドライバを失敗させる変化が起こりました。どうぞこの例外を報告して下さい。");
/*  11 */     hashtable.put("Connection attempt timed out.", "接続中にタイムアウトしました。");
/*  12 */     hashtable.put("Interrupted while attempting to connect.", "接続中に割り込みがありました。");
/*  13 */     hashtable.put("Method {0} is not yet implemented.", "方法 {0} はまだ装備されていません。");
/*  14 */     hashtable.put("Requested CopyIn but got {0}", "CopyInを要求しましたが {0} を得ます");
/*  15 */     hashtable.put("Requested CopyOut but got {0}", "CopyOutを要求しましたが {0} を得ます");
/*  16 */     hashtable.put("Copying from database failed: {0}", "データベースからコピーに失敗しました: {0}");
/*  17 */     hashtable.put("This copy stream is closed.", "copyストリームは閉じられました。");
/*  18 */     hashtable.put("Read from copy failed.", "copyからの読み取りに失敗しました。");
/*  19 */     hashtable.put("Cannot write to copy a byte of value {0}", "値{0}のバイトコピーで書き込みができません。");
/*  20 */     hashtable.put("A connection could not be made using the requested protocol {0}.", "要求されたプロトコル {0} を使用して接続することができません。");
/*  21 */     hashtable.put("Premature end of input stream, expected {0} bytes, but only read {1}.", "早すぎた入力ストリームの終了です、{0} バイトが想定されました、しかし唯一 {1} は読み込まれました。");
/*  22 */     hashtable.put("Expected an EOF from server, got: {0}", "サーバから EOF が想定されました、取得: {0}");
/*  23 */     hashtable.put("Illegal UTF-8 sequence: byte {0} of {1} byte sequence is not 10xxxxxx: {2}", "UTF-8シーケンス違反: {1} バイトシーケンスの {0} バイト は、10xxxxxx でありません: {2}");
/*  24 */     hashtable.put("Illegal UTF-8 sequence: {0} bytes used to encode a {1} byte value: {2}", "UTF-8シーケンス違反: {0} バイトは、 {1} バイト値のエンコードに使いました: {2}");
/*  25 */     hashtable.put("Illegal UTF-8 sequence: initial byte is {0}: {1}", "UTF-8シーケンス違反: 初期バイトは、{0}: {1}");
/*  26 */     hashtable.put("Illegal UTF-8 sequence: final value is out of range: {0}", "UTF-8シーケンス違反: 最終値は範囲外です: {0}");
/*  27 */     hashtable.put("Illegal UTF-8 sequence: final value is a surrogate value: {0}", "UTF-8シーケンス違反: 最終値はサロゲート値です: {0}");
/*  28 */     hashtable.put("Zero bytes may not occur in string parameters.", "ゼロ・バイトは、文字列パラメーターにできないかもしれません。");
/*  29 */     hashtable.put("Zero bytes may not occur in identifiers.", "ゼロ・バイトは、識別できないかもしれません。");
/*  30 */     hashtable.put("Cannot convert an instance of {0} to type {1}", "型 {1} に {0} のインスタンスを変換できません。");
/*  31 */     hashtable.put("Connection refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.", "接続は拒絶されました。ホスト名とポート番号が正しいか、または、ポストマスタがTCP/IP接続を受け入れているかを調べて下さい。");
/*  32 */     hashtable.put("The connection attempt failed.", "接続の試みは失敗しました。");
/*  33 */     hashtable.put("The server does not support SSL.", "サーバはSSLをサポートしていません。");
/*  34 */     hashtable.put("An error occured while setting up the SSL connection.", "SSL接続のセットアップ中に、エラーが起こりました。");
/*  35 */     hashtable.put("Connection rejected: {0}.", "接続は拒絶されました: {0}.");
/*  36 */     hashtable.put("The server requested password-based authentication, but no password was provided.", "サーバーは、パスワード・ベースの認証を要求しました、しかし、いかなるパスワードも提供されませんでした。");
/*  37 */     hashtable.put("The authentication type {0} is not supported. Check that you have configured the pg_hba.conf file to include the client''s IP address or subnet, and that it is using an authentication scheme supported by the driver.", "認証型 {0} はサポートされません、pg_hba.confファイルの構成でクライアントのIPアドレス、サブネットが含まれているか、そしてドライバがサポートする認証機構を使っているかを調べてください。");
/*  38 */     hashtable.put("Protocol error.  Session setup failed.", "プロトコルエラー, セッション設定は失敗しました。");
/*  39 */     hashtable.put("Backend start-up failed: {0}.", "バックエンドの開始に失敗しました: {0}");
/*  40 */     hashtable.put("An unexpected result was returned by a query.", "クエリーによって想定しない結果が返されました。");
/*  41 */     hashtable.put("The column index is out of range: {0}, number of columns: {1}.", "列インデックスは範囲外です: {0} , 列の数: {1}");
/*  42 */     hashtable.put("No value specified for parameter {0}.", "パラメータ {0} の明確な値がありません。");
/*  43 */     hashtable.put("Expected command status BEGIN, got {0}.", "BEGINコマンドステータスを想定しました, 取得 {0}");
/*  44 */     hashtable.put("Unexpected command status: {0}.", "想定外のコマンドステータス: {0}");
/*  45 */     hashtable.put("An I/O error occured while sending to the backend.", "バックエンドに送信中に、入出力エラーはが起こりました。");
/*  46 */     hashtable.put("Unknown Response Type {0}.", "未知の応答型 {0} です。");
/*  47 */     hashtable.put("Ran out of memory retrieving query results.", "メモリを使い果たし、クエリー結果を回収しました。");
/*  48 */     hashtable.put("Unable to interpret the update count in command completion tag: {0}.", "コマンド完了タグで更新数を解釈することができません: {0}");
/*  49 */     hashtable.put("Copy not implemented for protocol version 2", "プロトコルバージョン2でCopyは装備されていません");
/*  50 */     hashtable.put("CommandComplete expected COPY but got: ", "コマンド完了はCOPYを想定します、しかし取得は:");
/*  51 */     hashtable.put("Tried to obtain lock while already holding it", "すでに占有している最中のロック取得です");
/*  52 */     hashtable.put("Tried to break lock on database connection", "データベース接続のロック中断を試みます。");
/*  53 */     hashtable.put("Interrupted while waiting to obtain lock on database connection", "データベース接続でロック待ちの最中に割り込みがありました。");
/*  54 */     hashtable.put("Unable to bind parameter values for statement.", "ステートメントのバインドパラメーター値ができません。");
/*  55 */     hashtable.put("Database connection failed when starting copy", "文字列copy中にデータベース接続に失敗しました。");
/*  56 */     hashtable.put("Tried to cancel an inactive copy operation", "不活発なコピー操作の取り消しを試みました");
/*  57 */     hashtable.put("Database connection failed when canceling copy operation", "コピー操作取り消し中にデータベース接続に失敗しました");
/*  58 */     hashtable.put("Missing expected error response to copy cancel request", "コピー取り消し要求のエラー応答を想定しました");
/*  59 */     hashtable.put("Got {0} error responses to single copy cancel request", "単一copy取り消し要求の {0} エラー応答を得ました");
/*  60 */     hashtable.put("Tried to end inactive copy", "不活発なコピーの終了を試みました。");
/*  61 */     hashtable.put("Database connection failed when ending copy", "コピーを終えるときに、データベース接続は失敗しました");
/*  62 */     hashtable.put("Tried to write to an inactive copy operation", "不活発なコピー操作で書き込みを試みました。");
/*  63 */     hashtable.put("Database connection failed when writing to copy", "copy書き込み中にデータベース接続に失敗しました");
/*  64 */     hashtable.put("Tried to read from inactive copy", "活動していないcopyから読み取りを試みました。");
/*  65 */     hashtable.put("Database connection failed when reading from copy", "copyから読み取り中にデータベース接続が失敗しました");
/*  66 */     hashtable.put("Received CommandComplete ''{0}'' without an active copy operation", "活動中のコピー操作なしでCommandComplete ''{0}'' を受け取りました");
/*  67 */     hashtable.put("Got CopyInResponse from server during an active {0}", "活動中のサーバ {0} からCopyInResponseを得ました");
/*  68 */     hashtable.put("Got CopyOutResponse from server during an active {0}", "活動中のサーバ {0} からCopyOutResponseを得ました");
/*  69 */     hashtable.put("Got CopyData without an active copy operation", "活動中のコピー操作なしでCopyDataを得ました");
/*  70 */     hashtable.put("Unexpected copydata from server for {0}", "{0} のサーバからの思いがけない copydata です。");
/*  71 */     hashtable.put("Unexpected packet type during copy: {0}", "copy最中に思いがけないパケット型です: {0}");
/*  72 */     hashtable.put("Bind message length {0} too long.  This can be caused by very large or incorrect length specifications on InputStream parameters.", "バインドメッセージ長 {0} は長すぎます。これはとても大きくする要因となるか、あるいは、InputStreamパラメーターの不正確な長さ記述です。");
/*  73 */     hashtable.put("The server''s client_encoding parameter was changed to {0}. The JDBC driver requires client_encoding to be UNICODE for correct operation.", "サーバーのclient_encodingパラメーターが {0} に変わりました、JDBCドライバーは、正しい操作のためclient_encodingをUNICODEにすることを要求します。");
/*  74 */     hashtable.put("The server''s DateStyle parameter was changed to {0}. The JDBC driver requires DateStyle to begin with ISO for correct operation.", "サーバーのDateStyleパラメーターは、{0} に変わりました,JDBCドライバーは、正しい操作のISOで、開始するためのDateStyleを必要とします。");
/*  75 */     hashtable.put("The server''s standard_conforming_strings parameter was reported as {0}. The JDBC driver expected on or off.", "サーバーのstandard_conforming_stringsパラメーターは、{0}として報告されました。JDBCドライバーは、on または off を想定します。");
/*  76 */     hashtable.put("The driver currently does not support COPY operations.", "現在、ドライバはコピー操作をサポートしません。");
/*  77 */     hashtable.put("This PooledConnection has already been closed.", "PooledConnectionは、すでに閉じられています。");
/*  78 */     hashtable.put("Connection has been closed automatically because a new connection was opened for the same PooledConnection or the PooledConnection has been closed.", "同じPooledConnectionが開かれたので新しい接続は自動的に閉じられました、または、PooledConnectionが閉じられました。");
/*  79 */     hashtable.put("Connection has been closed.", "接続は閉じられました。");
/*  80 */     hashtable.put("Statement has been closed.", "構文は閉じられました。");
/*  81 */     hashtable.put("DataSource has been closed.", "データソースは閉じられました。");
/*  82 */     hashtable.put("Fastpath call {0} - No result was returned and we expected an integer.", "Fastpath 呼び出し {0} - いかなる結果も返されません、整数を予想しました。");
/*  83 */     hashtable.put("The fastpath function {0} is unknown.", " {0} は未知の fastpath 関数です。");
/*  84 */     hashtable.put("Conversion to type {0} failed: {1}.", "型変換 {0} は失敗しました: {1}.");
/*  85 */     hashtable.put("Cannot tell if path is open or closed: {0}.", "もし path が オープン、またはクローズされていたら話せません: {0}");
/*  86 */     hashtable.put("GSS Authentication failed", "GSS認証は失敗しました");
/*  87 */     hashtable.put("The array index is out of range: {0}", "配列インデックスは、範囲外です: {0}");
/*  88 */     hashtable.put("The array index is out of range: {0}, number of elements: {1}.", "配列インデックスは、範囲外です: {0} , 要素の数: {1}");
/*  89 */     hashtable.put("Truncation of large objects is only implemented in 8.3 and later servers.", "ラージオブジェクトの除去は、サーババージョンが 8.3 以上で装備されています。");
/*  90 */     hashtable.put("PostgreSQL LOBs can only index to: {0}", "PostgreSQL LOB は、インデックス {0} のみ可能です。 ");
/*  91 */     hashtable.put("LOB positioning offsets start at 1.", "LOB オフセット開始位置を 1 としてください。");
/*  92 */     hashtable.put("free() was called on this LOB previously", "free() は、 このLOB以前に呼ばれました");
/*  93 */     hashtable.put("Unsupported value for stringtype parameter: {0}", "文字列型パラメータのサポートされない値です: {0}");
/*  94 */     hashtable.put("unknownLength parameter value must be an integer", "未知の長さパラメータ値は整数でなければなりません");
/*  95 */     hashtable.put("No results were returned by the query.", "いかなる結果も、クエリーによって返されませんでした。");
/*  96 */     hashtable.put("A result was returned when none was expected.", "何も予想しなかったときに、結果が返されました。");
/*  97 */     hashtable.put("Custom type maps are not supported.", "カスタム・型のマップはサポートされません。");
/*  98 */     hashtable.put("Failed to create object for: {0}.", "{0} へのオブジェクト生成に失敗しました。");
/*  99 */     hashtable.put("Unable to load the class {0} responsible for the datatype {1}", "データ型 {1} 対応のクラス{0} をロードできません。");
/* 100 */     hashtable.put("Cannot change transaction read-only property in the middle of a transaction.", "トランザクション中に、読み出し専用プロパティトランザクションに変えることができません。");
/* 101 */     hashtable.put("Cannot commit when autoCommit is enabled.", "オートコミット有効時にコミットできません。");
/* 102 */     hashtable.put("This connection has been closed.", "接続は既に閉じられました。");
/* 103 */     hashtable.put("Cannot rollback when autoCommit is enabled.", "オートコミット有効時にロールバックできません。");
/* 104 */     hashtable.put("Cannot change transaction isolation level in the middle of a transaction.", "トランザクションの最中に隔離レベルを変えることができません。");
/* 105 */     hashtable.put("Transaction isolation level {0} not supported.", "トランザクション隔離レベル{0} はサポートされていません。");
/* 106 */     hashtable.put("Finalizing a Connection that was never closed:", "接続終了で閉じられませんでした:");
/* 107 */     hashtable.put("Unable to translate data into the desired encoding.", "望む符号化にデータを訳すことができません。");
/* 108 */     hashtable.put("Unable to determine a value for MaxIndexKeys due to missing system catalog data.", "間違ったシステム・カタログ・データのためにMaxIndexKeysの値を決めることができません。");
/* 109 */     hashtable.put("Unable to find name datatype in the system catalogs.", "名前データ型をシステムカタログで見つけることができません。");
/* 110 */     hashtable.put("Operation requires a scrollable ResultSet, but this ResultSet is FORWARD_ONLY.", "操作は、スクロール可能なResultSetを必要とします、しかし、このResultSetは、 FORWARD_ONLYです。");
/* 111 */     hashtable.put("Unexpected error while decoding character data from a large object.", "ラージオブジェクトから文字データの複合化中に思いがけないエラーが起きました。");
/* 112 */     hashtable.put("Can''t use relative move methods while on the insert row.", "行挿入の最中に関連の動作方法を使うことはできません。");
/* 113 */     hashtable.put("Invalid fetch direction constant: {0}.", "フェッチ方向コンスタントが不正です: {0}");
/* 114 */     hashtable.put("Cannot call cancelRowUpdates() when on the insert row.", "行挿入の最中にcancelRowUpdates()を呼び出せません。");
/* 115 */     hashtable.put("Cannot call deleteRow() when on the insert row.", "行挿入時に deleteRow() を呼び出せません。");
/* 116 */     hashtable.put("Currently positioned before the start of the ResultSet.  You cannot call deleteRow() here.", "ResultSetの開始の前に置かれました。ここでdeleteRowを呼ぶことはできません。");
/* 117 */     hashtable.put("Currently positioned after the end of the ResultSet.  You cannot call deleteRow() here.", "ResultSetの終わりの後に置かれました。ここでdeleteRowを呼ぶことはできません。");
/* 118 */     hashtable.put("There are no rows in this ResultSet.", "このResultSetにいかなる行もありません。");
/* 119 */     hashtable.put("Not on the insert row.", "挿入行がありません。");
/* 120 */     hashtable.put("You must specify at least one column value to insert a row.", "行挿入には、最低でも１つの列の値が必要です。");
/* 121 */     hashtable.put("The JVM claims not to support the encoding: {0}", "JVMでサポートされないエンコーディングです: {0}");
/* 122 */     hashtable.put("Provided InputStream failed.", "提供の InputStream は失敗しました。");
/* 123 */     hashtable.put("Provided Reader failed.", "提供の Reader は失敗しました。");
/* 124 */     hashtable.put("Can''t refresh the insert row.", "挿入行を回復することはできません。");
/* 125 */     hashtable.put("Cannot call updateRow() when on the insert row.", "列を挿入したときに、updateRow() を呼び出すことができません。");
/* 126 */     hashtable.put("Cannot update the ResultSet because it is either before the start or after the end of the results.", "開始前にResultSetを更新することができません、または結果の終わりの後です。");
/* 127 */     hashtable.put("ResultSets with concurrency CONCUR_READ_ONLY cannot be updated.", "CONCUR_READ_ONLYを伴うResultSetsは更新できませんでした。");
/* 128 */     hashtable.put("No primary key found for table {0}.", "テーブル {0} の主キーがありません。");
/* 129 */     hashtable.put("Fetch size must be a value greater to or equal to 0.", "フェッチサイズは、0に等しいか、より以上の値でなくてはなりません。");
/* 130 */     hashtable.put("Invalid character data was found.  This is most likely caused by stored data containing characters that are invalid for the character set the database was created in.  The most common example of this is storing 8bit data in a SQL_ASCII database.", "不正な文字データが見つかりました。これは、恐らく作成されたデータベースの文字セットにとって無効である文字を含むデータによって引き起こされます。最も共通の例として、8bitデータがSQL_ASCIIデータベースに保存されています。");
/* 131 */     hashtable.put("Bad value for type {0} : {1}", "型 {0} : {1} で不正な値");
/* 132 */     hashtable.put("The column name {0} was not found in this ResultSet.", "ResultSet に列名 {0} は見つかりませんでした。");
/* 133 */     hashtable.put("ResultSet is not updateable.  The query that generated this result set must select only one table, and must select all primary keys from that table. See the JDBC 2.1 API Specification, section 5.6 for more details.", "ResultSetは変更可能ではありません。この結果セットを生成したクエリーは、ただ一つのテーブルを選ばなくてはいけません、そしてそのテーブルから全ての主キーを選ばなくてはいけません。より多くの詳細に関して JDBC 2.1 API仕様、章 5.6 を参照して下さい。");
/* 134 */     hashtable.put("This ResultSet is closed.", "ResultSetは閉じられました。");
/* 135 */     hashtable.put("ResultSet not positioned properly, perhaps you need to call next.", "ResultSetは適切に配置されませんでした、たぶん、次に呼ぶ必要があります。");
/* 136 */     hashtable.put("Can''t use query methods that take a query string on a PreparedStatement.", "PreparedStatementでクエリー文字を含むクエリー方法は使えません。");
/* 137 */     hashtable.put("Multiple ResultSets were returned by the query.", "クエリーで、マルチのResultSetsが返されました。");
/* 138 */     hashtable.put("A CallableStatement was executed with nothing returned.", "CallableStatementは、戻りなしで実行されました。");
/* 139 */     hashtable.put("A CallableStatement was executed with an invalid number of parameters", "CallableStatementは、パラメーターの不正な数で実行されました");
/* 140 */     hashtable.put("A CallableStatement function was executed and the out parameter {0} was of type {1} however type {2} was registered.", "CallableStatement機能は実行されました、そして、出力パラメーター {0} は、型 {1} です。しかし、型 {2} が登録されました。");
/* 141 */     hashtable.put("Maximum number of rows must be a value grater than or equal to 0.", "行の最大数は、0に等しいか、より以上の値でなくてはなりません。");
/* 142 */     hashtable.put("Query timeout must be a value greater than or equals to 0.", "クエリータイムアウトは、0に等しいか、より以上の値でなくてはなりません。");
/* 143 */     hashtable.put("The maximum field size must be a value greater than or equal to 0.", "最大の項目サイズは、0に等しいか、または以上の値でなくてはなりません。");
/* 144 */     hashtable.put("Unknown Types value.", "未知の型の値です。");
/* 145 */     hashtable.put("Invalid stream length {0}.", "無効なストリーム長 {0}.");
/* 146 */     hashtable.put("The JVM claims not to support the {0} encoding.", "JVMは、エンコーディング {0} をサポートしません。");
/* 147 */     hashtable.put("Unknown type {0}.", "未知の型 {0}.");
/* 148 */     hashtable.put("Cannot cast an instance of {0} to type {1}", "インスタンス {0} は型 {1} へのキャストはできません");
/* 149 */     hashtable.put("Unsupported Types value: {0}", "サポートされない型の値: {0}.");
/* 150 */     hashtable.put("Can''t infer the SQL type to use for an instance of {0}. Use setObject() with an explicit Types value to specify the type to use.", "{0} で使うべきSQL型を推測できません。明確な型値で記述した setObject() を使ってください。");
/* 151 */     hashtable.put("This statement does not declare an OUT parameter.  Use '{' ?= call ... '}' to declare one.", "ステートメントは、OUTパラメーターを宣言しません。'{' ?= call ... '}' を使って宣言して下さい。");
/* 152 */     hashtable.put("wasNull cannot be call before fetching a result.", "wasNullは、結果フェッチ前に呼び出せません。");
/* 153 */     hashtable.put("Malformed function or procedure escape syntax at offset {0}.", "奇形の関数または手順は、位置 {0} で文法を逸しました。");
/* 154 */     hashtable.put("Parameter of type {0} was registered, but call to get{1} (sqltype={2}) was made.", "型 {0}  のパラメータは登録されました,、しかし、{1} 取得呼び出し(sqltype={2})が作られました。");
/* 155 */     hashtable.put("A CallableStatement was declared, but no call to registerOutParameter(1, <some type>) was made.", "CallableStatementは宣言されました、しかし registerOutParameterwas(1, <some type>) のいかなる呼び出しも作られません。");
/* 156 */     hashtable.put("No function outputs were registered.", "関数出力は登録されませんでした。");
/* 157 */     hashtable.put("Results cannot be retrieved from a CallableStatement before it is executed.", "実行される前に、CallableStatement から結果を得ることはできません。");
/* 158 */     hashtable.put("This statement has been closed.", "このステートメントは閉じられました。");
/* 159 */     hashtable.put("Too many update results were returned.", "多すぎる更新結果が返されました。");
/* 160 */     hashtable.put("Batch entry {0} {1} was aborted.  Call getNextException to see the cause.", "バッチ投入 {0} {1} は停止しました、getNextExceptionを呼んで原因を見て下さい。");
/* 161 */     hashtable.put("Unexpected error writing large object to database.", "ラージオブジェクトをデータベースへ書き込み中に想定外のエラーが起きました。");
/* 162 */     hashtable.put("{0} function takes one and only one argument.", "{0} 関数は、単一の引数のみを用います。");
/* 163 */     hashtable.put("{0} function takes two and only two arguments.", "{0} 関数は、二つの引数のみを用います。");
/* 164 */     hashtable.put("{0} function takes four and only four argument.", "{0} 関数は、四つの引数のみを用います。");
/* 165 */     hashtable.put("{0} function takes two or three arguments.", "{0} 関数は、二つ、または三つの引数を用います。");
/* 166 */     hashtable.put("{0} function doesn''t take any argument.", "{0} 関数は、どのような引数も用いません。");
/* 167 */     hashtable.put("{0} function takes three and only three arguments.", "{0} 関数は、三つの引数のみを用います。");
/* 168 */     hashtable.put("Interval {0} not yet implemented", "間隔 {0} はまだ装備されていません");
/* 169 */     hashtable.put("Infinite value found for timestamp/date. This cannot be represented as time.", "timestamp/date で無限値が見つかりました、これは、時間として表すことができません。");
/* 170 */     hashtable.put("The class {0} does not implement org.postgresql.util.PGobject.", "クラス {0} は、org.postgresql.util.PGobject を装備していません。");
/* 171 */     hashtable.put("Unknown ResultSet holdability setting: {0}.", "未知の ResultSet 保持的設定: {0}");
/* 172 */     hashtable.put("Server versions prior to 8.0 do not support savepoints.", "サーバーバージョン 8.0 以前は、savepointをサポートしません。");
/* 173 */     hashtable.put("Cannot establish a savepoint in auto-commit mode.", "オートコミットモードでsavepointを確立できません。");
/* 174 */     hashtable.put("Returning autogenerated keys is not supported.", "自動生成キーを返すことはサポートされていません。");
/* 175 */     hashtable.put("The parameter index is out of range: {0}, number of parameters: {1}.", "パラメーター・インデックスは範囲外です: {0} , パラメータ数: {1}");
/* 176 */     hashtable.put("Returning autogenerated keys is only supported for 8.2 and later servers.", "自動生成キーの戻りは 8.2 以上でサポートされます。");
/* 177 */     hashtable.put("Returning autogenerated keys by column index is not supported.", "列インデックスの自動生成キーの戻りはサポートされていません。");
/* 178 */     hashtable.put("Cannot reference a savepoint after it has been released.", "savepointは、解放された後で参照することはできません。");
/* 179 */     hashtable.put("Cannot retrieve the id of a named savepoint.", "名前の付いたsavepointのidを回収することができません。");
/* 180 */     hashtable.put("Cannot retrieve the name of an unnamed savepoint.", "名前のないsavepointを回収することができません。");
/* 181 */     hashtable.put("Invalid UUID data.", "UUIDデータ不正です。");
/* 182 */     hashtable.put("Unable to find server array type for provided name {0}.", "提供名 {0} で、サーバーの配列型を見つけることができません。");
/* 183 */     hashtable.put("ClientInfo property not supported.", "ClientInfo プロパティはサポートされていません。");
/* 184 */     hashtable.put("Unable to decode xml data.", "xmlデータを復号化できません。");
/* 185 */     hashtable.put("Unknown XML Source class: {0}", "未知のXMLソースクラス: {0}");
/* 186 */     hashtable.put("Unable to create SAXResult for SQLXML.", "SQLXMLへのSAXResult生成ができません。");
/* 187 */     hashtable.put("Unable to create StAXResult for SQLXML", "SQLXMLのStAXResultを生成できません。");
/* 188 */     hashtable.put("Unknown XML Result class: {0}", "未知のXML結果クラス: {0}");
/* 189 */     hashtable.put("This SQLXML object has already been freed.", "SQLXMLオブジェクトはすでに解放されました。");
/* 190 */     hashtable.put("This SQLXML object has not been initialized, so you cannot retrieve data from it.", "このSQLXMLオブジェクトは、初期化されませんでした、そこからデータを回収することができません。");
/* 191 */     hashtable.put("Failed to convert binary xml data to encoding: {0}.", "バイナリxmlデータをエンコード {0} に変換できません。");
/* 192 */     hashtable.put("Unable to convert DOMResult SQLXML data to a string.", "DOMResult SQLXMLデータを文字列に変えることができません。");
/* 193 */     hashtable.put("This SQLXML object has already been initialized, so you cannot manipulate it further.", "このSQLXMLオブジェクトは、すでに初期化されました、それ以上操作することができません。");
/* 194 */     hashtable.put("Failed to initialize LargeObject API", "ラージオブジェクトAPIの初期化に失敗しました。");
/* 195 */     hashtable.put("Large Objects may not be used in auto-commit mode.", "ラージオブジェクトでは、オートコミットモードを使うことができません。");
/* 196 */     hashtable.put("The SSLSocketFactory class provided {0} could not be instantiated.", "提供のSSLSocketFactoryクラス {0} は、即応しないかもしれません。");
/* 197 */     hashtable.put("Conversion of interval failed", "間隔の変換に失敗しました。");
/* 198 */     hashtable.put("Conversion of money failed.", "通貨の変換に失敗しました。");
/* 199 */     hashtable.put("Detail: {0}", "詳細l: {0}");
/* 200 */     hashtable.put("Hint: {0}", "ヒント: {0}");
/* 201 */     hashtable.put("Position: {0}", "ポジション: {0}");
/* 202 */     hashtable.put("Where: {0}", "場所: {0}");
/* 203 */     hashtable.put("Internal Query: {0}", "インターナル・クエリー: {0}");
/* 204 */     hashtable.put("Internal Position: {0}", "インターナル・ポジション: {0}");
/* 205 */     hashtable.put("Location: File: {0}, Routine: {1}, Line: {2}", "場所: ファイル: {0}, ルーチン: {1},行: {2}");
/* 206 */     hashtable.put("Server SQLState: {0}", "サーバー SQLState: {0}");
/* 207 */     hashtable.put("Invalid flags", "フラグ不正");
/* 208 */     hashtable.put("xid must not be null", "xidはnullではいけません");
/* 209 */     hashtable.put("Connection is busy with another transaction", "接続は、別のトランザクションで忙しいです");
/* 210 */     hashtable.put("suspend/resume not implemented", "停止/再開 は装備されていません");
/* 211 */     hashtable.put("Transaction interleaving not implemented", "トランザクションの間に実施されませんでした。");
/* 212 */     hashtable.put("Error disabling autocommit", "オート・コミット無効エラー");
/* 213 */     hashtable.put("tried to call end without corresponding start call", "対応する開始呼び出しなしで、終了呼び出しを得ました。");
/* 214 */     hashtable.put("Not implemented: Prepare must be issued using the same connection that started the transaction", "装備されていません: 準備は、開始トランザクションと同じ接続で使わなくてはなりません。");
/* 215 */     hashtable.put("Prepare called before end", "終了前に\"準備\"が呼ばれました");
/* 216 */     hashtable.put("Server versions prior to 8.1 do not support two-phase commit.", "2フェーズ COMMIT は、サーババージョン 8.1以前はサポートされません。");
/* 217 */     hashtable.put("Error preparing transaction", "準備トランザクションエラー");
/* 218 */     hashtable.put("Invalid flag", "無効なフラグ");
/* 219 */     hashtable.put("Error during recover", "回復中にエラー");
/* 220 */     hashtable.put("Error rolling back prepared transaction", "準備トランザクションのロールバッグエラー");
/* 221 */     hashtable.put("Not implemented: one-phase commit must be issued using the same connection that was used to start it", "装備されていません: 単一フェーズのCOMMITは同じ接続を使って始めなければなりません。");
/* 222 */     hashtable.put("commit called before end", "終了の前に COMMIT を呼びました");
/* 223 */     hashtable.put("Error during one-phase commit", "単一フェーズのCOMMITの最中にエラー");
/* 224 */     hashtable.put("Not implemented: 2nd phase commit must be issued using an idle connection", "装備されていません: 第二フェーズの COMMIT は、待機接続で使わなくてはなりません。");
/* 225 */     hashtable.put("Error committing prepared transaction", "準備トランザクションのコミットエラー");
/* 226 */     hashtable.put("Heuristic commit/rollback not supported", "サポートされない commit/rollback が見つかりました。");
/* 227 */     table = hashtable;
/*     */   }
/*     */   
/*     */   public Object handleGetObject(String paramString) throws MissingResourceException {
/* 230 */     return table.get(paramString);
/*     */   }
/*     */   
/*     */   public Enumeration getKeys() {
/* 233 */     return table.keys();
/*     */   }
/*     */   
/*     */   public ResourceBundle getParent() {
/* 236 */     return this.parent;
/*     */   }
/*     */ }


/* Location:              D:\#source-code\TheFlightSims\TFSLibrary\World2Xplane\World2XPlane.jar!\org\postgresql\translation\messages_ja.class
 * Java compiler version: 1 (45.3)
 * JD-Core Version:       1.1.3
 */