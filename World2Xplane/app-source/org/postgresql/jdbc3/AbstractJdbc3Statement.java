/*      */ package org.postgresql.jdbc3;
/*      */ 
/*      */ import java.io.InputStream;
/*      */ import java.io.Reader;
/*      */ import java.math.BigDecimal;
/*      */ import java.net.URL;
/*      */ import java.sql.Array;
/*      */ import java.sql.Blob;
/*      */ import java.sql.Clob;
/*      */ import java.sql.Date;
/*      */ import java.sql.ParameterMetaData;
/*      */ import java.sql.Ref;
/*      */ import java.sql.ResultSet;
/*      */ import java.sql.SQLException;
/*      */ import java.sql.Time;
/*      */ import java.sql.Timestamp;
/*      */ import java.util.Calendar;
/*      */ import java.util.Map;
/*      */ import java.util.Vector;
/*      */ import org.postgresql.Driver;
/*      */ import org.postgresql.core.BaseConnection;
/*      */ import org.postgresql.core.ResultHandler;
/*      */ import org.postgresql.core.Utils;
/*      */ import org.postgresql.jdbc2.AbstractJdbc2Statement;
/*      */ import org.postgresql.util.GT;
/*      */ import org.postgresql.util.PSQLException;
/*      */ import org.postgresql.util.PSQLState;
/*      */ 
/*      */ public abstract class AbstractJdbc3Statement extends AbstractJdbc2Statement {
/*      */   private final int rsHoldability;
/*      */   
/*      */   public AbstractJdbc3Statement(AbstractJdbc3Connection c, int rsType, int rsConcurrency, int rsHoldability) throws SQLException {
/*   36 */     super(c, rsType, rsConcurrency);
/*   37 */     this.rsHoldability = rsHoldability;
/*      */   }
/*      */   
/*      */   public AbstractJdbc3Statement(AbstractJdbc3Connection connection, String sql, boolean isCallable, int rsType, int rsConcurrency, int rsHoldability) throws SQLException {
/*   42 */     super(connection, sql, isCallable, rsType, rsConcurrency);
/*   43 */     this.rsHoldability = rsHoldability;
/*      */   }
/*      */   
/*      */   public boolean getMoreResults(int current) throws SQLException {
/*   74 */     if (current == 1 && this.result != null && this.result.getResultSet() != null)
/*   75 */       this.result.getResultSet().close(); 
/*   78 */     if (this.result != null)
/*   79 */       this.result = this.result.getNext(); 
/*   82 */     if (current == 3)
/*   85 */       while (this.firstUnclosedResult != this.result) {
/*   87 */         if (this.firstUnclosedResult.getResultSet() != null)
/*   88 */           this.firstUnclosedResult.getResultSet().close(); 
/*   89 */         this.firstUnclosedResult = this.firstUnclosedResult.getNext();
/*      */       }  
/*   94 */     return (this.result != null && this.result.getResultSet() != null);
/*      */   }
/*      */   
/*      */   public ResultSet getGeneratedKeys() throws SQLException {
/*  110 */     checkClosed();
/*  111 */     if (this.generatedKeys == null || this.generatedKeys.getResultSet() == null)
/*  112 */       return createDriverResultSet(new org.postgresql.core.Field[0], new Vector()); 
/*  114 */     return this.generatedKeys.getResultSet();
/*      */   }
/*      */   
/*      */   public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
/*  141 */     if (autoGeneratedKeys == 2)
/*  142 */       return executeUpdate(sql); 
/*  144 */     sql = addReturning(this.connection, sql, new String[] { "*" }, false);
/*  145 */     this.wantsGeneratedKeysOnce = true;
/*  147 */     return executeUpdate(sql);
/*      */   }
/*      */   
/*      */   static String addReturning(BaseConnection connection, String sql, String[] columns, boolean escape) throws SQLException {
/*  152 */     if (!connection.haveMinimumServerVersion("8.2"))
/*  153 */       throw new PSQLException(GT.tr("Returning autogenerated keys is only supported for 8.2 and later servers."), PSQLState.NOT_IMPLEMENTED); 
/*  155 */     sql = sql.trim();
/*  156 */     if (sql.endsWith(";"))
/*  157 */       sql = sql.substring(0, sql.length() - 1); 
/*  159 */     StringBuffer sb = new StringBuffer(sql);
/*  160 */     sb.append(" RETURNING ");
/*  161 */     for (int i = 0; i < columns.length; i++) {
/*  162 */       if (i != 0)
/*  163 */         sb.append(", "); 
/*  169 */       if (escape) {
/*  170 */         Utils.appendEscapedIdentifier(sb, columns[i]);
/*      */       } else {
/*  172 */         sb.append(columns[i]);
/*      */       } 
/*      */     } 
/*  175 */     return sb.toString();
/*      */   }
/*      */   
/*      */   public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
/*  198 */     if (columnIndexes == null || columnIndexes.length == 0)
/*  199 */       return executeUpdate(sql); 
/*  201 */     throw new PSQLException(GT.tr("Returning autogenerated keys by column index is not supported."), PSQLState.NOT_IMPLEMENTED);
/*      */   }
/*      */   
/*      */   public int executeUpdate(String sql, String[] columnNames) throws SQLException {
/*  223 */     if (columnNames == null || columnNames.length == 0)
/*  224 */       return executeUpdate(sql); 
/*  226 */     sql = addReturning(this.connection, sql, columnNames, true);
/*  227 */     this.wantsGeneratedKeysOnce = true;
/*  229 */     return executeUpdate(sql);
/*      */   }
/*      */   
/*      */   public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
/*  270 */     if (autoGeneratedKeys == 2)
/*  271 */       return execute(sql); 
/*  273 */     sql = addReturning(this.connection, sql, new String[] { "*" }, false);
/*  274 */     this.wantsGeneratedKeysOnce = true;
/*  276 */     return execute(sql);
/*      */   }
/*      */   
/*      */   public boolean execute(String sql, int[] columnIndexes) throws SQLException {
/*  316 */     if (columnIndexes == null || columnIndexes.length == 0)
/*  317 */       return execute(sql); 
/*  319 */     throw new PSQLException(GT.tr("Returning autogenerated keys by column index is not supported."), PSQLState.NOT_IMPLEMENTED);
/*      */   }
/*      */   
/*      */   public boolean execute(String sql, String[] columnNames) throws SQLException {
/*  360 */     if (columnNames == null || columnNames.length == 0)
/*  361 */       return execute(sql); 
/*  363 */     sql = addReturning(this.connection, sql, columnNames, true);
/*  364 */     this.wantsGeneratedKeysOnce = true;
/*  366 */     return execute(sql);
/*      */   }
/*      */   
/*      */   public int getResultSetHoldability() throws SQLException {
/*  381 */     return this.rsHoldability;
/*      */   }
/*      */   
/*      */   public void setURL(int parameterIndex, URL x) throws SQLException {
/*  396 */     throw Driver.notImplemented(getClass(), "setURL(int,URL)");
/*      */   }
/*      */   
/*      */   public ParameterMetaData getParameterMetaData() throws SQLException {
/*  412 */     int flags = 49;
/*  413 */     AbstractJdbc2Statement.StatementResultHandler handler = new AbstractJdbc2Statement.StatementResultHandler(this);
/*  414 */     this.connection.getQueryExecutor().execute(this.preparedQuery, this.preparedParameters, (ResultHandler)handler, 0, 0, flags);
/*  416 */     int[] oids = this.preparedParameters.getTypeOIDs();
/*  417 */     if (oids != null)
/*  418 */       return createParameterMetaData(this.connection, oids); 
/*  420 */     return null;
/*      */   }
/*      */   
/*      */   public abstract ParameterMetaData createParameterMetaData(BaseConnection paramBaseConnection, int[] paramArrayOfint) throws SQLException;
/*      */   
/*      */   public void registerOutParameter(String parameterName, int sqlType) throws SQLException {
/*  453 */     throw Driver.notImplemented(getClass(), "registerOutParameter(String,int)");
/*      */   }
/*      */   
/*      */   public void registerOutParameter(String parameterName, int sqlType, int scale) throws SQLException {
/*  480 */     throw Driver.notImplemented(getClass(), "registerOutParameter(String,int,int)");
/*      */   }
/*      */   
/*      */   public void registerOutParameter(String parameterName, int sqlType, String typeName) throws SQLException {
/*  520 */     throw Driver.notImplemented(getClass(), "registerOutParameter(String,int,String)");
/*      */   }
/*      */   
/*      */   public URL getURL(int parameterIndex) throws SQLException {
/*  539 */     throw Driver.notImplemented(getClass(), "getURL(String)");
/*      */   }
/*      */   
/*      */   public void setURL(String parameterName, URL val) throws SQLException {
/*  556 */     throw Driver.notImplemented(getClass(), "setURL(String,URL)");
/*      */   }
/*      */   
/*      */   public void setNull(String parameterName, int sqlType) throws SQLException {
/*  571 */     throw Driver.notImplemented(getClass(), "setNull(String,int)");
/*      */   }
/*      */   
/*      */   public void setBoolean(String parameterName, boolean x) throws SQLException {
/*  587 */     throw Driver.notImplemented(getClass(), "setBoolean(String,boolean)");
/*      */   }
/*      */   
/*      */   public void setByte(String parameterName, byte x) throws SQLException {
/*  603 */     throw Driver.notImplemented(getClass(), "setByte(String,byte)");
/*      */   }
/*      */   
/*      */   public void setShort(String parameterName, short x) throws SQLException {
/*  619 */     throw Driver.notImplemented(getClass(), "setShort(String,short)");
/*      */   }
/*      */   
/*      */   public void setInt(String parameterName, int x) throws SQLException {
/*  635 */     throw Driver.notImplemented(getClass(), "setInt(String,int)");
/*      */   }
/*      */   
/*      */   public void setLong(String parameterName, long x) throws SQLException {
/*  651 */     throw Driver.notImplemented(getClass(), "setLong(String,long)");
/*      */   }
/*      */   
/*      */   public void setFloat(String parameterName, float x) throws SQLException {
/*  667 */     throw Driver.notImplemented(getClass(), "setFloat(String,float)");
/*      */   }
/*      */   
/*      */   public void setDouble(String parameterName, double x) throws SQLException {
/*  683 */     throw Driver.notImplemented(getClass(), "setDouble(String,double)");
/*      */   }
/*      */   
/*      */   public void setBigDecimal(String parameterName, BigDecimal x) throws SQLException {
/*  700 */     throw Driver.notImplemented(getClass(), "setBigDecimal(String,BigDecimal)");
/*      */   }
/*      */   
/*      */   public void setString(String parameterName, String x) throws SQLException {
/*  719 */     throw Driver.notImplemented(getClass(), "setString(String,String)");
/*      */   }
/*      */   
/*      */   public void setBytes(String parameterName, byte[] x) throws SQLException {
/*  737 */     throw Driver.notImplemented(getClass(), "setBytes(String,byte)");
/*      */   }
/*      */   
/*      */   public void setDate(String parameterName, Date x) throws SQLException {
/*  754 */     throw Driver.notImplemented(getClass(), "setDate(String,Date)");
/*      */   }
/*      */   
/*      */   public void setTime(String parameterName, Time x) throws SQLException {
/*  771 */     throw Driver.notImplemented(getClass(), "setTime(String,Time)");
/*      */   }
/*      */   
/*      */   public void setTimestamp(String parameterName, Timestamp x) throws SQLException {
/*  789 */     throw Driver.notImplemented(getClass(), "setTimestamp(String,Timestamp)");
/*      */   }
/*      */   
/*      */   public void setAsciiStream(String parameterName, InputStream x, int length) throws SQLException {
/*  814 */     throw Driver.notImplemented(getClass(), "setAsciiStream(String,InputStream,int)");
/*      */   }
/*      */   
/*      */   public void setBinaryStream(String parameterName, InputStream x, int length) throws SQLException {
/*  838 */     throw Driver.notImplemented(getClass(), "setBinaryStream(String,InputStream,int)");
/*      */   }
/*      */   
/*      */   public void setObject(String parameterName, Object x, int targetSqlType, int scale) throws SQLException {
/*  876 */     throw Driver.notImplemented(getClass(), "setObject(String,Object,int,int)");
/*      */   }
/*      */   
/*      */   public void setObject(String parameterName, Object x, int targetSqlType) throws SQLException {
/*  895 */     throw Driver.notImplemented(getClass(), "setObject(String,Object,int)");
/*      */   }
/*      */   
/*      */   public void setObject(String parameterName, Object x) throws SQLException {
/*  932 */     throw Driver.notImplemented(getClass(), "setObject(String,Object)");
/*      */   }
/*      */   
/*      */   public void setCharacterStream(String parameterName, Reader reader, int length) throws SQLException {
/*  960 */     throw Driver.notImplemented(getClass(), "setCharacterStream(String,Reader,int)");
/*      */   }
/*      */   
/*      */   public void setDate(String parameterName, Date x, Calendar cal) throws SQLException {
/*  984 */     throw Driver.notImplemented(getClass(), "setDate(String,Date,Calendar)");
/*      */   }
/*      */   
/*      */   public void setTime(String parameterName, Time x, Calendar cal) throws SQLException {
/* 1008 */     throw Driver.notImplemented(getClass(), "setTime(String,Time,Calendar)");
/*      */   }
/*      */   
/*      */   public void setTimestamp(String parameterName, Timestamp x, Calendar cal) throws SQLException {
/* 1032 */     throw Driver.notImplemented(getClass(), "setTimestamp(String,Timestamp,Calendar)");
/*      */   }
/*      */   
/*      */   public void setNull(String parameterName, int sqlType, String typeName) throws SQLException {
/* 1067 */     throw Driver.notImplemented(getClass(), "setNull(String,int,String)");
/*      */   }
/*      */   
/*      */   public String getString(String parameterName) throws SQLException {
/* 1089 */     throw Driver.notImplemented(getClass(), "getString(String)");
/*      */   }
/*      */   
/*      */   public boolean getBoolean(String parameterName) throws SQLException {
/* 1104 */     throw Driver.notImplemented(getClass(), "getBoolean(String)");
/*      */   }
/*      */   
/*      */   public byte getByte(String parameterName) throws SQLException {
/* 1119 */     throw Driver.notImplemented(getClass(), "getByte(String)");
/*      */   }
/*      */   
/*      */   public short getShort(String parameterName) throws SQLException {
/* 1134 */     throw Driver.notImplemented(getClass(), "getShort(String)");
/*      */   }
/*      */   
/*      */   public int getInt(String parameterName) throws SQLException {
/* 1150 */     throw Driver.notImplemented(getClass(), "getInt(String)");
/*      */   }
/*      */   
/*      */   public long getLong(String parameterName) throws SQLException {
/* 1166 */     throw Driver.notImplemented(getClass(), "getLong(String)");
/*      */   }
/*      */   
/*      */   public float getFloat(String parameterName) throws SQLException {
/* 1181 */     throw Driver.notImplemented(getClass(), "getFloat(String)");
/*      */   }
/*      */   
/*      */   public double getDouble(String parameterName) throws SQLException {
/* 1196 */     throw Driver.notImplemented(getClass(), "getDouble(String)");
/*      */   }
/*      */   
/*      */   public byte[] getBytes(String parameterName) throws SQLException {
/* 1212 */     throw Driver.notImplemented(getClass(), "getBytes(String)");
/*      */   }
/*      */   
/*      */   public Date getDate(String parameterName) throws SQLException {
/* 1227 */     throw Driver.notImplemented(getClass(), "getDate(String)");
/*      */   }
/*      */   
/*      */   public Time getTime(String parameterName) throws SQLException {
/* 1242 */     throw Driver.notImplemented(getClass(), "getTime(String)");
/*      */   }
/*      */   
/*      */   public Timestamp getTimestamp(String parameterName) throws SQLException {
/* 1257 */     throw Driver.notImplemented(getClass(), "getTimestamp(String)");
/*      */   }
/*      */   
/*      */   public Object getObject(String parameterName) throws SQLException {
/* 1279 */     throw Driver.notImplemented(getClass(), "getObject(String)");
/*      */   }
/*      */   
/*      */   public BigDecimal getBigDecimal(String parameterName) throws SQLException {
/* 1295 */     throw Driver.notImplemented(getClass(), "getBigDecimal(String)");
/*      */   }
/*      */   
/*      */   public Object getObjectImpl(String parameterName, Map map) throws SQLException {
/* 1317 */     throw Driver.notImplemented(getClass(), "getObject(String,Map)");
/*      */   }
/*      */   
/*      */   public Ref getRef(String parameterName) throws SQLException {
/* 1333 */     throw Driver.notImplemented(getClass(), "getRef(String)");
/*      */   }
/*      */   
/*      */   public Blob getBlob(String parameterName) throws SQLException {
/* 1349 */     throw Driver.notImplemented(getClass(), "getBlob(String)");
/*      */   }
/*      */   
/*      */   public Clob getClob(String parameterName) throws SQLException {
/* 1364 */     throw Driver.notImplemented(getClass(), "getClob(String)");
/*      */   }
/*      */   
/*      */   public Array getArray(String parameterName) throws SQLException {
/* 1380 */     throw Driver.notImplemented(getClass(), "getArray(String)");
/*      */   }
/*      */   
/*      */   public Date getDate(String parameterName, Calendar cal) throws SQLException {
/* 1405 */     throw Driver.notImplemented(getClass(), "getDate(String,Calendar)");
/*      */   }
/*      */   
/*      */   public Time getTime(String parameterName, Calendar cal) throws SQLException {
/* 1430 */     throw Driver.notImplemented(getClass(), "getTime(String,Calendar)");
/*      */   }
/*      */   
/*      */   public Timestamp getTimestamp(String parameterName, Calendar cal) throws SQLException {
/* 1456 */     throw Driver.notImplemented(getClass(), "getTimestamp(String,Calendar)");
/*      */   }
/*      */   
/*      */   public URL getURL(String parameterName) throws SQLException {
/* 1474 */     throw Driver.notImplemented(getClass(), "getURL(String)");
/*      */   }
/*      */   
/*      */   public void setObject(int parameterIndex, Object x, int targetSqlType, int scale) throws SQLException {
/* 1479 */     if (targetSqlType == 16)
/* 1481 */       targetSqlType = -7; 
/* 1483 */     super.setObject(parameterIndex, x, targetSqlType, scale);
/*      */   }
/*      */   
/*      */   public void setNull(int parameterIndex, int sqlType) throws SQLException {
/* 1488 */     if (sqlType == 16)
/* 1490 */       sqlType = -7; 
/* 1492 */     super.setNull(parameterIndex, sqlType);
/*      */   }
/*      */   
/*      */   protected boolean wantsHoldableResultSet() {
/* 1498 */     return (this.rsHoldability == 1);
/*      */   }
/*      */   
/*      */   public void registerOutParameter(int parameterIndex, int sqlType) throws SQLException {
/* 1505 */     switch (sqlType) {
/*      */       case 16:
/* 1508 */         sqlType = -7;
/*      */         break;
/*      */     } 
/* 1513 */     registerOutParameter(parameterIndex, sqlType, !this.adjustIndex);
/*      */   }
/*      */   
/*      */   public void registerOutParameter(int parameterIndex, int sqlType, int scale) throws SQLException {
/* 1519 */     registerOutParameter(parameterIndex, sqlType);
/*      */   }
/*      */ }


/* Location:              D:\#source-code\TheFlightSims\TFSLibrary\World2Xplane\World2XPlane.jar!\org\postgresql\jdbc3\AbstractJdbc3Statement.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       1.1.3
 */